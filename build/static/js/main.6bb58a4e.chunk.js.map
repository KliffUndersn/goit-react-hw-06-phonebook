{"version":3,"sources":["components/redux/actions.js","components/InputForm/ContactList/ContactList.js","components/InputForm/FilterContacts/FilterContacts.js","components/InputForm/InputForm.js","components/redux/store.js","App.js","index.js"],"names":["deleteContact","createAction","addContact","filterContact","ContactList","filteredContacts","dispatch","useDispatch","map","e","name","number","onClick","id","FilterContacts","type","placeholder","onChange","target","value","InputForm","onSubmit","onDelete","changiFilter","items","useSelector","state","filter","console","log","useState","setState","handleChange","preventDefault","newName","includes","alert","singleContact","generate","pattern","title","required","filtered","toLowerCase","reducer","createReducer","action","payload","contactPercistConfig","key","storage","blacklist","store","configureStore","persistReducer","persistStore","getState","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6bb58a4e.chunk.js","sourcesContent":["// import types from './types';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const deleteContact = createAction('contacts/delete');\r\nexport const addContact = createAction('contacts/add');\r\nexport const filterContact = createAction('contacts/filter');\r\n\r\n// export const addContact = contact => {\r\n//   return {\r\n//     type: types.ADD,\r\n//     payload: contact,\r\n//   };\r\n// };\r\n\r\n// export const deleteContact = id => {\r\n//   return {\r\n//     type: types.DELETE,\r\n//     payload: id,\r\n//   };\r\n// };\r\n\r\n// export const filterContact = name => {\r\n//   return {\r\n//     type: types.FILTER,\r\n//     payload: name,\r\n//   };\r\n// };\r\n","import PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteContact } from '../../redux/actions';\r\n\r\nexport const ContactList = ({ filteredContacts }) => {\r\n  // console.log(filteredContacts)\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <>\r\n      {filteredContacts && (\r\n        <>\r\n          <h3>Contacts</h3>\r\n          <ul>\r\n            {filteredContacts.map(e => (\r\n              <li key={e.id}>\r\n                {e.name} : {e.number}\r\n                <button onClick={() => dispatch(deleteContact(e.id))}>\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  filteredContacts: PropTypes.arrayOf(Object).isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { filterContact } from '../../redux/actions';\r\n\r\nexport const FilterContacts = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <h2>Find contacts by name</h2>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        placeholder=\"start typing\"\r\n        onChange={({ target }) => dispatch(filterContact(target.value))}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nFilterContacts.propTypes = {\r\n  filtered: PropTypes.func.isRequired,\r\n};\r\n","import { useState } from 'react';\r\nimport { v4 as generate } from 'uuid';\r\nimport { ContactList } from './ContactList/ContactList';\r\nimport { FilterContacts } from './FilterContacts/FilterContacts';\r\nimport { connect } from 'react-redux';\r\nimport { addContact, deleteContact, filterContact } from '../redux/actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst InputForm = ({ onSubmit, onDelete, changiFilter }) => {\r\n  const dispatch = useDispatch();\r\n  const items = useSelector(state => state.items);\r\n  const filter = useSelector(state => state.filter);\r\n  console.log(items);\r\n  const [state, setState] = useState({\r\n    name: '',\r\n    number: '',\r\n  });\r\n  const handleChange = ({ target }) => {\r\n    setState({ ...state, [target.name]: target.value });\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = state;\r\n    const newName = items.map(e => e.name);\r\n    if (newName.includes(e.target.name.value)) {\r\n      return alert(`${e.target.name.value} says hello from chat`);\r\n    }\r\n    const singleContact = {\r\n      id: generate(),\r\n      name,\r\n      number,\r\n    };\r\n    dispatch(addContact(singleContact));\r\n  };\r\n  const filterContacts = e => {\r\n    return items.filter(e => e.name.toLowerCase().includes(filter));\r\n  };\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <h1>Phonebook</h1>\r\n        <h2>Name</h2>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={handleChange}\r\n        />\r\n        <h2>Number</h2>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={handleChange}\r\n        />\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n\r\n      <FilterContacts filtered={changiFilter} />\r\n\r\n      <ContactList\r\n        filteredContacts={filterContacts()}\r\n        // deleteContact={onDelete}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n// const mapStateToProps = ({ items, filter }) => {\r\n//   return {\r\n//     items,\r\n//     filter,\r\n//   };\r\n// };\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onSubmit: value => dispatch(addContact(value)),\r\n//   onDelete: id => dispatch(deleteContact(id)),\r\n//   changiFilter: ({ target }) => dispatch(filterContact(target.value)),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(InputForm);\r\nexport default InputForm;\r\n","// import { createStore } from 'redux';\r\nimport { configureStore, createReducer } from '@reduxjs/toolkit';\r\n// import types from './types';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { addContact, deleteContact, filterContact } from './actions';\r\n\r\nconst initialStore = {\r\n  filter: '',\r\n  items: [],\r\n};\r\n\r\nconst reducer = createReducer(initialStore, {\r\n  [addContact]: (state, action) => {\r\n    return { filter: state.filter, items: [...state.items, action.payload] };\r\n  },\r\n  [deleteContact]: (state, action) => {\r\n    return {\r\n      filter: state.filter,\r\n      items: state.items.filter(e => e.id !== action.payload),\r\n    };\r\n  },\r\n  [filterContact]: (state, action) => {\r\n    return { filter: action.payload, items: [...state.items] };\r\n  },\r\n});\r\n\r\n// const reducer = (state = initialStore, action) => {\r\n//   switch (action.type) {\r\n//     case types.ADD:\r\n//       return { filter: state.filter, items: [...state.items, action.payload] };\r\n//     case types.DELETE:\r\n//       return {\r\n//         filter: state.filter,\r\n//         items: state.items.filter(e => e.id !== action.payload),\r\n//       };\r\n//     case types.FILTER:\r\n//       return { filter: action.payload, items: [...state.items] };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\nconst contactPercistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n// const store = createStore(\r\n//   persistReducer(contactPercistConfig, reducer),\r\n//   composeWithDevTools(),\r\n// );\r\n\r\nconst store = configureStore({\r\n  reducer: persistReducer(contactPercistConfig, reducer),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n","import React from 'react';\r\nimport InputForm from './components/InputForm/InputForm';\r\nimport store from './components/redux/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nstore.getState();\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Provider store={store}>\r\n        <InputForm />\r\n      </Provider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}